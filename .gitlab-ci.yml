# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:3.6

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/
  - node_modules/
  - elm-stuff/

stages:
  - build
  - test
  - deploy

unit:
  stage: test
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: nice_marmot
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST: postgres
    DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB
  script:
    - python -V # Print out python version for debugging
    - pip install -r requirements.txt
    - coverage run --source='./testr' manage.py test
    - coverage report

ui:
  stage: test
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: nice_marmot
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST: postgres
    DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB
  script:
    - python -V # Print out python version for debugging
    - pip install -r requirements.txt
    - python manage.py behave

staging:
  image: ruby:latest
  stage: deploy
  type: deploy
  only:
    - master
  script:
    - curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_STAGING_APP --api-key=$HEROKU_STAGING_API_KEY
    - heroku run python manage.py migrate --exit-code --app $HEROKU_STAGING_APP

production:
  image: ruby:latest
  stage: deploy
  type: deploy
  only:
    - tags
  script:
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_PRODUCTION_APP --api-key=$HEROKU_PRODUCTION_API_KEY
